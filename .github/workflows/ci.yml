name: CI

on:
  push:
    branches: [ main, develop ]
  pull_request:
    branches: [ main ]

jobs:
  test:
    runs-on: ubuntu-latest
    
    strategy:
      matrix:
        compiler: [gcc-9, gcc-10, clang-10, clang-11]
        build_type: [Debug, Release]
    
    steps:
    - uses: actions/checkout@v3
    
    - name: Install dependencies
      run: |
        sudo apt-get update
        sudo apt-get install -y \
          cmake \
          libprotobuf-dev \
          protobuf-compiler \
          libabsl-dev \
          libzookeeper-mt-dev \
          lcov \
          ${{ matrix.compiler }}
    
    - name: Configure CMake
      run: |
        mkdir build
        cd build
        cmake -DCMAKE_BUILD_TYPE=${{ matrix.build_type }} \
              -DCMAKE_CXX_COMPILER=${{ matrix.compiler == 'gcc-9' && 'g++-9' || matrix.compiler == 'gcc-10' && 'g++-10' || matrix.compiler == 'clang-10' && 'clang++-10' || 'clang++-11' }} \
              ..
    
    - name: Build
      run: |
        cd build
        make -j$(nproc)
    
    - name: Run tests
      run: |
        cd build
        ctest --output-on-failure --verbose
    
    - name: Generate coverage report (Debug only)
      if: matrix.build_type == 'Debug' && matrix.compiler == 'gcc-10'
      run: |
        cd tests
        chmod +x test_coverage.sh
        ./test_coverage.sh
    
    - name: Upload coverage to Codecov
      if: matrix.build_type == 'Debug' && matrix.compiler == 'gcc-10'
      uses: codecov/codecov-action@v3
      with:
        file: ./build_coverage/coverage_filtered.info
        flags: unittests
        name: codecov-umbrella

  static-analysis:
    runs-on: ubuntu-latest
    
    steps:
    - uses: actions/checkout@v3
    
    - name: Install dependencies
      run: |
        sudo apt-get update
        sudo apt-get install -y \
          cmake \
          libprotobuf-dev \
          protobuf-compiler \
          libabsl-dev \
          libzookeeper-mt-dev \
          cppcheck \
          clang-tidy
    
    - name: Run cppcheck
      run: |
        cppcheck --enable=all --std=c++17 --suppress=missingIncludeSystem src/ tests/
    
    - name: Run clang-tidy
      run: |
        mkdir build
        cd build
        cmake -DCMAKE_EXPORT_COMPILE_COMMANDS=ON ..
        cd ..
        clang-tidy src/*.cc tests/*.cc -p build/ 